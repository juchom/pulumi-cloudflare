// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package cloudflare

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Cloudflare Access Policy resource. Access Policies are used
// in conjunction with Access Applications to restrict access to a
// particular resource.
// 
// ## Conditions
// 
// `require`, `exclude` and `include` arguments share the available
// conditions which can be applied. The conditions are:
// 
// * `ip` - (Optional) A list of IP addresses or ranges. Example:
//   `ip = ["1.2.3.4", "10.0.0.0/2"]`
// * `email` - (Optional) A list of email addresses. Example:
//   `email = ["test@example.com"]`
// * `emailDomain` - (Optional) A list of email domains. Example:
//   `emailDomain = ["example.com"]`
// * `everyone` - (Optional) Boolean indicating permitting access for all
//   requests. Example: `everyone = true`
// 
// > This content is derived from https://github.com/terraform-providers/terraform-provider-cloudflare/blob/master/website/docs/r/access_policy.html.markdown.
type AccessPolicy struct {
	pulumi.CustomResourceState

	// The ID of the application the policy is
	// associated with.
	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`
	// Defines the action Access will take if the policy matches the user.
	// Allowed values: `allow`, `deny`, `bypass`
	Decision pulumi.StringOutput `pulumi:"decision"`
	// A series of access conditions, see below for
	// full list.
	Excludes AccessPolicyExcludeArrayOutput `pulumi:"excludes"`
	// A series of access conditions, see below for
	// full list.
	Includes AccessPolicyIncludeArrayOutput `pulumi:"includes"`
	// Friendly name of the Access Application.
	Name pulumi.StringOutput `pulumi:"name"`
	// The unique precedence for policies on a single application. Integer.
	Precedence pulumi.IntPtrOutput `pulumi:"precedence"`
	// A series of access conditions, see below for
	// full list.
	Requires AccessPolicyRequireArrayOutput `pulumi:"requires"`
	// The DNS zone to which the access rule should be
	// added.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewAccessPolicy registers a new resource with the given unique name, arguments, and options.
func NewAccessPolicy(ctx *pulumi.Context,
	name string, args *AccessPolicyArgs, opts ...pulumi.ResourceOption) (*AccessPolicy, error) {
	if args == nil || args.ApplicationId == nil {
		return nil, errors.New("missing required argument 'ApplicationId'")
	}
	if args == nil || args.Decision == nil {
		return nil, errors.New("missing required argument 'Decision'")
	}
	if args == nil || args.Includes == nil {
		return nil, errors.New("missing required argument 'Includes'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.ZoneId == nil {
		return nil, errors.New("missing required argument 'ZoneId'")
	}
	if args == nil {
		args = &AccessPolicyArgs{}
	}
	var resource AccessPolicy
	err := ctx.RegisterResource("cloudflare:index/accessPolicy:AccessPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessPolicy gets an existing AccessPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessPolicyState, opts ...pulumi.ResourceOption) (*AccessPolicy, error) {
	var resource AccessPolicy
	err := ctx.ReadResource("cloudflare:index/accessPolicy:AccessPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessPolicy resources.
type accessPolicyState struct {
	// The ID of the application the policy is
	// associated with.
	ApplicationId *string `pulumi:"applicationId"`
	// Defines the action Access will take if the policy matches the user.
	// Allowed values: `allow`, `deny`, `bypass`
	Decision *string `pulumi:"decision"`
	// A series of access conditions, see below for
	// full list.
	Excludes []AccessPolicyExclude `pulumi:"excludes"`
	// A series of access conditions, see below for
	// full list.
	Includes []AccessPolicyInclude `pulumi:"includes"`
	// Friendly name of the Access Application.
	Name *string `pulumi:"name"`
	// The unique precedence for policies on a single application. Integer.
	Precedence *int `pulumi:"precedence"`
	// A series of access conditions, see below for
	// full list.
	Requires []AccessPolicyRequire `pulumi:"requires"`
	// The DNS zone to which the access rule should be
	// added.
	ZoneId *string `pulumi:"zoneId"`
}

type AccessPolicyState struct {
	// The ID of the application the policy is
	// associated with.
	ApplicationId pulumi.StringPtrInput
	// Defines the action Access will take if the policy matches the user.
	// Allowed values: `allow`, `deny`, `bypass`
	Decision pulumi.StringPtrInput
	// A series of access conditions, see below for
	// full list.
	Excludes AccessPolicyExcludeArrayInput
	// A series of access conditions, see below for
	// full list.
	Includes AccessPolicyIncludeArrayInput
	// Friendly name of the Access Application.
	Name pulumi.StringPtrInput
	// The unique precedence for policies on a single application. Integer.
	Precedence pulumi.IntPtrInput
	// A series of access conditions, see below for
	// full list.
	Requires AccessPolicyRequireArrayInput
	// The DNS zone to which the access rule should be
	// added.
	ZoneId pulumi.StringPtrInput
}

func (AccessPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessPolicyState)(nil)).Elem()
}

type accessPolicyArgs struct {
	// The ID of the application the policy is
	// associated with.
	ApplicationId string `pulumi:"applicationId"`
	// Defines the action Access will take if the policy matches the user.
	// Allowed values: `allow`, `deny`, `bypass`
	Decision string `pulumi:"decision"`
	// A series of access conditions, see below for
	// full list.
	Excludes []AccessPolicyExclude `pulumi:"excludes"`
	// A series of access conditions, see below for
	// full list.
	Includes []AccessPolicyInclude `pulumi:"includes"`
	// Friendly name of the Access Application.
	Name string `pulumi:"name"`
	// The unique precedence for policies on a single application. Integer.
	Precedence *int `pulumi:"precedence"`
	// A series of access conditions, see below for
	// full list.
	Requires []AccessPolicyRequire `pulumi:"requires"`
	// The DNS zone to which the access rule should be
	// added.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a AccessPolicy resource.
type AccessPolicyArgs struct {
	// The ID of the application the policy is
	// associated with.
	ApplicationId pulumi.StringInput
	// Defines the action Access will take if the policy matches the user.
	// Allowed values: `allow`, `deny`, `bypass`
	Decision pulumi.StringInput
	// A series of access conditions, see below for
	// full list.
	Excludes AccessPolicyExcludeArrayInput
	// A series of access conditions, see below for
	// full list.
	Includes AccessPolicyIncludeArrayInput
	// Friendly name of the Access Application.
	Name pulumi.StringInput
	// The unique precedence for policies on a single application. Integer.
	Precedence pulumi.IntPtrInput
	// A series of access conditions, see below for
	// full list.
	Requires AccessPolicyRequireArrayInput
	// The DNS zone to which the access rule should be
	// added.
	ZoneId pulumi.StringInput
}

func (AccessPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessPolicyArgs)(nil)).Elem()
}

